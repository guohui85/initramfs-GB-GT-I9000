#!/sbin/sh

# Copyright 2010 Renaud Allard. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are
# permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice, this list of
#       conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright notice, this list
#       of conditions and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY Renaud Allard ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Renaud Allard OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those of the
# authors and should not be interpreted as representing official policies, either expressed
# or implied, of Renaud Allard.

VERSION=2.3

PATH=/bin:/sbin:/usr/bin/:/usr/sbin:/system/bin

build_fs_current()
{
	echo 'DO NOT MODIFY THIS FILE, YOUR SYSTEM WOULD NOT BE ABLE TO BOOT' > /fugumod_sd/fugumod/fs.current
	mkdir /fugu_mnt
	for DEVICE in mmcblk0p2 stl10 stl11 stl9
	do
		mount -o ro /dev/block/${DEVICE} /fugu_mnt
		mount | awk '/\/fugu_mnt/ { print $1 " " $5 }' | awk -F "/" '{ print $4 }' | sed 's/vfat/rfs/' | sed 's/ext.*/ext4/' >> /fugumod_sd/fugumod/fs.current
		umount /fugu_mnt
	done
	rmdir /fugu_mnt
}


set_mount_options()
{
case $STL9_FS in
	jfs)
	STL9_MNT=',relatime,iocharset=utf8'
	;;
	ext*)
	STL9_MNT=',noatime,data=writeback,noauto_da_alloc,barrier=0'
	;;
	reiserfs)
	STL9_MNT=',noatime,notail'
	;;
	rfs)
	STL9_MNT=',noatime,check=no'
	;;
esac
case $STL10_FS in
	jfs)
	STL10_MNT=',relatime,iocharset=utf8'
	;;
	ext*)
	STL10_MNT=',noatime,nodelalloc,data=ordered,noauto_da_alloc,barrier=0'
	;;
	reiserfs)
	STL10_MNT=',noatime,notail'
	;;
	tmpfs)
	STL10_MNT=',size=32m'
	;;
	rfs)
	STL10_MNT=',noatime,check=no'
	;;
esac
case $STL11_FS in
	jfs)
	STL11_MNT=',relatime,iocharset=utf8'
	;;
	ext*)
	STL11_MNT=',noatime,data=writeback,noauto_da_alloc,barrier=0'
	;;
	reiserfs)
	STL11_MNT=',noatime,notail'
	;;
	tmpfs)
	STL11_MNT=',size=32m'
	;;
	rfs)
	STL11_MNT=',noatime,check=no'
	;;
esac
case $MMC_FS in
	jfs)
	MMC_MNT=',relatime,iocharset=utf8'
	;;
	ext*)
	MMC_MNT=',noatime,data=ordered,noauto_da_alloc,barrier=1'
	;;
	reiserfs)
	MMC_MNT=',noatime,notail'
	;;
	tmpfs)
	MMC_MNT=',size=200m'
	;;
	rfs)
	MMC_MNT=',noatime,check=no'
	;;
esac
}

get_filesystems() {
	STL9_FS=`grep stl9 /fugumod_sd/fugumod/fs.current | awk '{ print $2 }' | sed 's/ext.*/ext4/g'`
	STL10_FS=`grep stl10 /fugumod_sd/fugumod/fs.current | awk '{ print $2 }' | sed 's/ext.*/ext4/g'`
	STL11_FS=`grep stl11 /fugumod_sd/fugumod/fs.current | awk '{ print $2 }' | sed 's/ext.*/ext4/g'`
	MMC_FS=`grep mmcblk0p2 /fugumod_sd/fugumod/fs.current | awk '{ print $2 }' | sed 's/ext.*/ext4/g'`
}

date >/fugumod.log
echo "Version:$VERSION" >>/fugumod.log
uname -a >>/fugumod.log

# standard
mkdir /dev
mknod /dev/null c 1 3
mknod /dev/zero c 1 5
mknod /dev/urandom c 1 9

# internal & external SD
mkdir /dev/block
mknod /dev/block/mmcblk0 b 179 0
mknod /dev/block/mmcblk0p1 b 179 1
mknod /dev/block/mmcblk0p2 b 179 2
mknod /dev/block/mmcblk0p3 b 179 3
mknod /dev/block/mmcblk0p4 b 179 4
mknod /dev/block/mmcblk1 b 179 8
mknod /dev/block/stl1 b 138 1
mknod /dev/block/stl2 b 138 2
mknod /dev/block/stl3 b 138 3
mknod /dev/block/stl4 b 138 4
mknod /dev/block/stl5 b 138 5
mknod /dev/block/stl6 b 138 6
mknod /dev/block/stl7 b 138 7
mknod /dev/block/stl8 b 138 8
mknod /dev/block/stl9 b 138 9
mknod /dev/block/stl10 b 138 10
mknod /dev/block/stl11 b 138 11
mknod /dev/block/stl12 b 138 12
mknod /dev/block/bml0!c b 137 0
mknod /dev/block/bml1 b 137 1
mknod /dev/block/bml2 b 137 2
mknod /dev/block/bml3 b 137 3
mknod /dev/block/bml4 b 137 4
mknod /dev/block/bml5 b 137 5
mknod /dev/block/bml6 b 137 6
mknod /dev/block/bml7 b 137 7
mknod /dev/block/bml8 b 137 8
mknod /dev/block/bml9 b 137 9
mknod /dev/block/bml10 b 137 10
mknod /dev/block/bml11 b 137 11
mknod /dev/block/bml12 b 137 12
mknod /dev/onedram b 252 0

#ramzswap
mknod /dev/ramzswap0 b 253 0

mount -t proc proc /proc
mount -t sysfs sys /sys

ULTRA=0

if grep rcu_preempt /proc/kallsyms >/dev/null
then
	echo 'Ultra Version Detected' >> /fugumod.log
	ULTRA=1
fi

insmod /lib/modules/fsr.ko
insmod /lib/modules/fsr_stl.ko

mkdir -p /fugumod_sd
mount -t vfat -o utf8 /dev/block/mmcblk0p1 /fugumod_sd

# check for debug
if test -f /fugumod_sd/fugumod/debug
then
	echo '  ro.secure=0
		ro.allow.mock.location=0
		ro.debuggable=1
		persist.service.adb.enable=1' > /default.prop
else
	echo '  ro.secure=1
		ro.allow.mock.location=0
		ro.debuggable=0
		persist.service.adb.enable=0' > /default.prop
fi

# check for bln
if test -f /fugumod_sd/fugumod/nobln
then
	echo 0 > /sys/devices/virtual/misc/backlightnotification/enabled
fi

# check for compcache
if test -f /fugumod_sd/fugumod/compcache
then
	/sbin/rzscontrol /dev/ramzswap0 --init
	/sbin/swapon /dev/ramzswap0
fi

#Check if conf directory exists, if not create one
if ! test -d /fugumod_sd/fugumod
then
	rm -rf /fugumod_sd/fugumod
	mkdir /fugumod_sd/fugumod
fi

# Creates config
build_fs_current
set_mount_options
get_filesystems

#Insert RFS modules if any filesystem is rfs
if grep rfs /fugumod_sd/fugumod/fs.current | grep -v reiser || grep rfs /fugumod_sd/fugumod/fs.convert 2>/dev/null | grep -v reiser
then
	echo "RFS detected: inserting modules" >> /fugumod.log
	insmod /rfs/rfs_glue.ko
	insmod /rfs/rfs_fat.ko

	if grep rfs /fugumod_sd/fugumod/fs.convert 2>/dev/null | grep -v reiser
	then
		#get required files for fat.format
		mount -t ${STL9_FS} -o ro${STL9_MNT} /dev/block/stl9 /system 2>>/fugumod.log
		mount >>/fugumod.log
		cp /system/bin/linker /rfs/ 2>>/fugumod.log
		for FILE in libc.so libcutils.so liblog.so libm.so libstdc++.so
		do
			cp /system/lib/$FILE /rfs/ 2>>/fugumod.log
		done
		umount /system 2>>/fugumod.log
		mkdir -p /system/bin 2>>/fugumod.log
		mkdir -p /system/lib 2>>/fugumod.log
		mv /rfs/linker /system/bin/ 2>>/fugumod.log
		mv /rfs/lib* /system/lib/ 2>>/fugumod.log
		ln -s /sbin/fat.format.real /sbin/mkfs.rfs 2>>/fugumod.log
	fi
fi


#fsck filesystems
for DEVICE in mmcblk0p2 stl10 stl11 stl9
do
	echo "Checking ${DEVICE}" >>/fugumod.log
	case `grep ${DEVICE} /fugumod_sd/fugumod/fs.current | awk '{ print $2 }'` in
	jfs)
	/sbin/jfs_fsck -p /dev/block/${DEVICE} >>/fugumod.log 2>>/fugumod.log
	;;
	ext*)
	/sbin/e2fsck -p /dev/block/${DEVICE} >>/fugumod.log 2>>/fugumod.log
	;;
	reiserfs)
	echo "reiserfs, not checking" >>/fugumod.log 2>>/fugumod.log
	;;
	rfs)
	echo "rfs, not checking" >>/fugumod.log 2>>/fugumod.log
	;;
	esac
done

#check if we need to convert something (from sanitized output)
if test -f /fugumod_sd/fugumod/fs.convert
then
	mkdir /fugumod_data
	egrep "stl|mmc" /fugumod_sd/fugumod/fs.convert | tr '\011' ' ' | sed 's/ */ /g' | sed 's/^ *//g' | awk '{ print $1 " " $2 }' | while read DEVICE NEW_FS
	do
		CUR_FS=`grep ${DEVICE} /fugumod_sd/fugumod/fs.current | awk '{ print $2 }'`
		if [ "${CUR_FS}" != "${NEW_FS}" ]
		then
			echo "$DEVICE is in $CUR_FS and needs to be converted to $NEW_FS" >> /fugumod.log
			case ${NEW_FS} in
			jfs)
			MKFS='/sbin/jfs_mkfs -q '
			;;
			ext4)
			MKFS='/sbin/mke2fs -J size=4 -T ext4 -b 4096 -O ^resize_inode,^ext_attr,^huge_file '
			;;
			ext3)
			MKFS='/sbin/mke2fs -J size=4 -T ext3 -b 4096 -O ^resize_inode,^ext_attr,^huge_file '
			;;
			ext2)
			MKFS='/sbin/mke2fs -T ext2 -b 4096 -O ^resize_inode,^ext_attr,^huge_file '
			;;
			reiserfs)
			MKFS='/sbin/mkreiserfs -q -b 4096 -s 1000 '
			;;
			rfs)
			MKFS='/sbin/mkfs.rfs -F 16 -S 4096 '
			;;
			esac
			if [ "${CUR_FS}" == "rfs" ]
			then
				mount -t ${CUR_FS} -o ro,check=no /dev/block/${DEVICE} /fugumod_data 2>>/fugumod.log
			else
				mount -t ${CUR_FS} -o ro /dev/block/${DEVICE} /fugumod_data 2>>/fugumod.log
			fi
			echo "`date` : archiving ${DEVICE} for conversion" >>/fugumod.log
			mount |grep fugumod >>/fugumod.log
			cd /fugumod_data/
			tar cvf /fugumod_sd/fugumod_data.tar * >>/fugumod.log 2>>/fugumod.log
			cd /
			sync
			umount /dev/block/${DEVICE}
			echo "`date` : formatting ${DEVICE} for conversion" >>/fugumod.log
			dd if=/dev/zero of=/dev/block/${DEVICE} bs=1024 count=10
			${MKFS} /dev/block/${DEVICE} >> /fugumod.log 2>> /fugumod.log
			if [ "${NEW_FS}" == "rfs" ]
			then
				mount -t ${NEW_FS} -o rw,noatime,nodiratime,check=no /dev/block/${DEVICE} /fugumod_data
			else
				mount -t ${NEW_FS} -o rw,noatime,nodiratime /dev/block/${DEVICE} /fugumod_data
			fi
			echo "`date` : unarchiving ${DEVICE}" >>/fugumod.log
			cd /fugumod_data/
			tar xvf /fugumod_sd/fugumod_data.tar >>/fugumod.log 2>>/fugumod.log
			cd /
			sync
			umount /dev/block/${DEVICE}
		fi
	done
	rm /fugumod_sd/fugumod/fs.convert
	rmdir /fugumod_data
	#regenerate a fs.current
	build_fs_current
	rm /fugumod_sd/fugumod_data.tar
fi

if test -f /fugumod_sd/fugumod/fs.tmpfs
then
	for DEVICE in mmcblk0p2 stl10 stl11 
	do
		sed -i "s/$DEVICE.*/$DEVICE tmpfs/" /fugumod_sd/fugumod/fs.current
	done
	rm  /fugumod_sd/fugumod/fs.tmpfs
fi

# get filesystems
get_filesystems

if test -f /fugumod_sd/fugumod/fs.options
then
	STL9_MNT=",`grep stl9 /fugumod_sd/fugumod/fs.options | awk '{ print $2 }'`"
	STL10_MNT=",`grep stl10 /fugumod_sd/fugumod/fs.options | awk '{ print $2 }'`"
	STL11_MNT=",`grep stl11 /fugumod_sd/fugumod/fs.options | awk '{ print $2 }'`"
	MMC_MNT=",`grep mmcblk0p2 /fugumod_sd/fugumod/fs.options | awk '{ print $2 }'`"
else
	set_mount_options
fi
	
# Kill that stupid autoformatter
mount -t ${STL9_FS} -o rw${STL9_MNT} /dev/block/stl9 /system
rm /system/bin/fat.format
ln -s /sbin/fat.format /system/bin/fat.format

# generate recovery.fstab
echo "
/efs	rfs	/dev/block/stl3	default	default
/system	${STL9_FS}	/dev/block/stl9	default	rw${STL9_MNT}
/dbdata	${STL10_FS}	/dev/block/stl10	default	rw${STL10_MNT}
/cache	${STL11_FS}	/dev/block/stl11	default	rw${STL11_MNT}
/sdcard	vfat	/dev/block/mmcblk0p1	default	default
/data	${MMC_FS}	/dev/block/mmcblk0p2	default	rw${MMC_MNT}
" > /system/etc/recovery.fstab
cp /system/etc/recovery.fstab /etc/recovery.fstab

# Mount data since it will be used for tests afterwards anyway
mount -t ${MMC_FS} -o rw${MMC_MNT} /dev/block/mmcblk0p2 /data

#JVH wifi
if test -d /data/wifi
then
    cd /data
    mkdir -p misc/wifi
    cp -rp wifi/* misc/wifi/
    rm -rf wifi
    ln -s misc/wifi .
    cd wifi
    ln -s bcm_supp.conf wpa_supplicant.conf
    cd /
fi

#Superuser
if test ! -f /system/app/Superuser.apk
then
    cp /res/misc/Superuser.apk /system/app/
    chown 0.0 /system/app/Superuser.apk
    chmod 644 /system/app/Superuser.apk
fi

#Copy bootanimation to system
if test ! -f /system/bin/bootanimation
then
    cp /res/misc/bootanimation /system/bin/
    chmod 755 /system/bin/bootanimation
fi

# To fix ROM Manager
if test ! -d /system/xbin
then
    mkdir -p /system/xbin
fi

#install various things
if [ ! -f /system/Renaud_Allard.$VERSION ]
then

# erase all old flags
    rm /system/Renaud_Allard*

# Ensure ROM is coherent
    rm -rf /system/xbin
    rm -f /system/bin/sh
    #ln -s /sbin/sh /system/bin/sh
    ln -s /system/bin/bash /system/bin/sh

# Superuser
    rm /system/app/Superuser.apk
    rm /data/app/Superuser.apk
    rm /data/dalvik-cache/*uperuser.apk*
    cp /res/misc/Superuser.apk /system/app/
    chown 0.0 /system/app/Superuser.apk
    chmod 644 /system/app/Superuser.apk

# FuguApp
    rm /system/app/fuguapp.apk

# Change GPS settings
    sed -i 's/north-america/europe/' /system/etc/gps.conf

# change wifi settings
    sed -i 's/ccode=.*/ccode=ALL/' /system/etc/wifi/nvram_net.txt

# Remove noisy startup/shutdown sounds
    rm /system/etc/PowerOn.wav /system/media/audio/ui/shutdown.ogg /system/media/audio/ui/TW_Battery_caution.ogg 

# install backlight lib
    cp /res/misc/liblight_binary/lights.s5pc110.so /system/lib/hw/

# Dirty hack to get back notification sounds
    cp -r /system/media/audio/notifications /fugumod_sd/
    cp -r /system/media/audio/ringtones /fugumod_sd/
    cp -r /system/media/audio/alarms /fugumod_sd/

# remove some useless Kies processes
    rm /system/bin/drexe /system/bin/npsmobex

# Once be enough
    echo 1 > /system/Renaud_Allard.$VERSION

fi;

# Mount dbdata to fix permissions
mkdir -p /dbdata
mount -t ${STL10_FS} -o rw${STL10_MNT} /dev/block/stl10 /dbdata
if test -f /fugumod_sd/fugumod/checkperms
then
	/sbin/fix_permissions >>/fugumod.log
fi

# Try to see if we have an EFS backup, if not create it but not if running Ultra
if test ! -f /fugumod_sd/fugumod/EFS_backup.tar && [ $ULTRA == 0 ]
then
    insmod /rfs/rfs_glue.ko
    insmod /rfs/rfs_fat.ko
    mkdir -p /efs
    mount -t rfs -o ro,nosuid,nodev,check=no /dev/block/stl3 /efs
    cd /
    tar cvf /fugumod_sd/fugumod/EFS_backup.tar efs >>/fugumod.log
    umount /efs
    rmdir /efs
fi

# Has EFS been erased? If yes, recreate it from backup
# That's a basic check, I don't really check contents but that more when someone rm -rf /data/*
if test ! -d /dbdata/efs 
then
# Copy /efs
    cd /dbdata
    tar xvf /fugumod_sd/fugumod/EFS_backup.tar >>/fugumod.log
    chown -R 1001:1001 /dbdata/efs
    chmod 0771 /dbdata/efs
fi

# remove temporary stuff to free memory
rm /res/misc/Superuser.apk

# modify mount options to inject in android inits
STL9_MNT=`echo ${STL9_MNT} | sed 's/\,/ /g'`
STL10_MNT=`echo ${STL10_MNT} | sed 's/\,/ /g'`
STL11_MNT=`echo ${STL11_MNT} | sed 's/\,/ /g'`
MMC_MNT=`echo ${MMC_MNT} | sed 's/\,/ /g'`

# Inline inject mountpoints
sed -i "s|fugu_mount_stl9|mount ${STL9_FS} /dev/block/stl9 /system nodev nodiratime ro${STL9_MNT}|" /init.rc
sed -i "s|fugu_mount_stl9|mount ${STL9_FS} /dev/block/stl9 /system nodev nodiratime rw${STL9_MNT}|" /recovery.rc
sed -i "s|fugu_mount_stl10|mount ${STL10_FS} /dev/block/stl10 /dbdata noexec nodiratime nosuid nodev rw${STL10_MNT}|" /init.rc /recovery.rc
sed -i "s|fugu_mount_stl11|mount ${STL11_FS} /dev/block/stl11 /cache noexec nodiratime nosuid nodev rw${STL11_MNT}|" /init.rc /recovery.rc
sed -i "s|fugu_mount_mmcblk0p2|mount ${MMC_FS} /dev/block/mmcblk0p2 /data nodiratime nosuid nodev rw${MMC_MNT}|" /init.rc /recovery.rc

# some speed optimizations
for i in stl9 stl10 stl11
do
        echo 2048 > /sys/devices/virtual/block/$i/queue/read_ahead_kb
done
echo 2048 > /sys/devices/platform/s3c-sdhci.0/mmc_host/mmc0/mmc0:0001/block/mmcblk0/queue/read_ahead_kb
echo 2048 > /sys/devices/platform/s3c-sdhci.2/mmc_host/mmc2/mmc2:e624/block/mmcblk1/queue/read_ahead_kb

# copy log file to /data
cp /fugumod.log /data/fugumod.log

# unmount all filesystems

umount /dbdata
umount /data
umount /system
umount /dev/block/mmcblk0p1
rmdir /fugumod_sd
#remove fake etc and system/bin which is only useful to format filesystems
rm -rf /etc
rm -rf /system/bin
rm -f /lib/*

echo "Logging remaining mounts" >> /fugumod.log
mount >> /fugumod.log

rm -f /init
mv /init_samsung /init
exec /init

